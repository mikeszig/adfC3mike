{
	"name": "azcopy",
	"properties": {
		"activities": [
			{
				"name": "until",
				"type": "Until",
				"dependsOn": [
					{
						"activity": "set_countdown",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(bool(variables('flag_found')), true)",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "get_input_meta",
							"type": "GetMetadata",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "input",
									"type": "DatasetReference"
								},
								"fieldList": [
									"childItems"
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							}
						},
						{
							"name": "filter_flag",
							"type": "Filter",
							"dependsOn": [
								{
									"activity": "get_input_meta",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"items": {
									"value": "@activity('get_input_meta').output.childItems",
									"type": "Expression"
								},
								"condition": {
									"value": "@equals(item().name,concat('flag_', utcNow('yyyyMMdd'),'.flg'))",
									"type": "Expression"
								}
							}
						},
						{
							"name": "If Condition1",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "filter_flag",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@and(\n    not(\n        equals(activity('filter_flag').output.FilteredItemsCount, 0)\n        ),\n    equals(activity('filter_flag').output.value[0].name,\n    concat('flag_', utcNow('yyyyMMdd'),'.flg'))\n    )\n    \n\n",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "wait_60s",
										"type": "Wait",
										"dependsOn": [
											{
												"activity": "set_flag_found_false",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"waitTimeInSeconds": 60
										}
									},
									{
										"name": "set_flag_found_false",
										"type": "SetVariable",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"variableName": "flag_found",
											"value": "false"
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "set_flag_found_true",
										"type": "SetVariable",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"variableName": "flag_found",
											"value": "true"
										}
									}
								]
							}
						},
						{
							"name": "update_timenow",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "If Condition1",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "wait_1m",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "timenow",
								"value": {
									"value": "@formatDateTime(utcNow(), 'HHmmss')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "wait_1m",
							"type": "Wait",
							"dependsOn": [
								{
									"activity": "If Condition1",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"waitTimeInSeconds": 60
							}
						}
					],
					"timeout": "0.00:00:10"
				}
			},
			{
				"name": "set_countdown",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "init_timenow",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "countdown",
					"value": {
						"value": "@formatDateTime(addSeconds(utcNow(),5),'HHmmss')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "init_timenow",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "timenow",
					"value": {
						"value": "@formatDateTime(utcNow(), 'HHmmss')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "cp_input_output",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "until",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"storeSettings": {
							"type": "AzureBlobStorageReadSettings",
							"recursive": true,
							"modifiedDatetimeStart": "2023-03-03T00:00:00.000Z",
							"wildcardFolderPath": {
								"value": "@utcNow('yyyyMMdd')",
								"type": "Expression"
							},
							"wildcardFileName": "*",
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings"
						}
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobStorageWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".csv"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "input",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "output",
						"type": "DatasetReference"
					}
				]
			}
		],
		"variables": {
			"countdown": {
				"type": "String"
			},
			"flag_found": {
				"type": "String"
			},
			"timenow": {
				"type": "String"
			}
		},
		"annotations": []
	}
}