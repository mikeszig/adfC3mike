{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfc3mike"
		},
		"MySql1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MySql1'"
		},
		"azure_blob_storage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'azure_blob_storage'"
		},
		"azure_blob_storage_t2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'azure_blob_storage_t2'"
		},
		"MySql2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MySql2'"
		},
		"trigger_mvdata_properties_entrypoint_pipeline_parameters_param_call_sql": {
			"type": "bool",
			"defaultValue": false
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/MvData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "drugs",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "drugs_dest",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "drugs",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "azure_blob_storage_t2",
									"type": "LinkedServiceReference"
								},
								"path": "input"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/drugs')]",
				"[concat(variables('factoryId'), '/datasets/drugs_dest')]",
				"[concat(variables('factoryId'), '/linkedServices/azure_blob_storage_t2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cp_sql_output",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": "SELECT * FROM daily WHERE day = CURDATE();"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "day",
											"type": "DateTime"
										},
										"sink": {
											"name": "day",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "value",
											"type": "String"
										},
										"sink": {
											"name": "value",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false,
									"dateTimeFormat": "yyyy-MM-dd"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "MySqlTable2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "output_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MySqlTable2')]",
				"[concat(variables('factoryId'), '/datasets/output_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azcopy_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "until",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "set_countdown",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(\n    equals(bool(variables('flag_found')), true),\n    less(int(variables('timenow')),\n        int(variables('countdown')))\n    )",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "get_input_meta",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "input",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"childItems"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "filter_flag",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "get_input_meta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('get_input_meta').output.childItems",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().name,concat('flag_', utcNow('yyyyMMdd'),'.flg'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "if_flag_found",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "filter_flag",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(\n    not(\n        equals(activity('filter_flag').output.FilteredItemsCount, 0)\n        ),\n    equals(activity('filter_flag').output.value[0].name,\n    concat('flag_', utcNow('yyyyMMdd'),'.flg'))\n    )\n    \n\n",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "wait_60s",
												"type": "Wait",
												"dependsOn": [
													{
														"activity": "set_flag_found_false",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 60
												}
											},
											{
												"name": "set_flag_found_false",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "flag_found",
													"value": "false"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "set_flag_found_true",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "flag_found",
													"value": "true"
												}
											}
										]
									}
								},
								{
									"name": "update_timenow",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "if_flag_found",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "wait_1m",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "timenow",
										"value": {
											"value": "@formatDateTime(utcNow(), 'HHmmss')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "wait_1m",
									"type": "Wait",
									"dependsOn": [
										{
											"activity": "if_flag_found",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 60
									}
								}
							],
							"timeout": "0.01:05:00"
						}
					},
					{
						"name": "set_countdown",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "init_timenow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "countdown",
							"value": {
								"value": "@formatDateTime(addHours(utcNow(),1),'HHmmss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "init_timenow",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "timenow",
							"value": {
								"value": "@formatDateTime(utcNow(), 'HHmmss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "cp_input_output",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "until",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": "2023-03-03T00:00:00.000Z",
									"enablePartitionDiscovery": false,
									"prefix": {
										"value": "@{utcNow('yyyyMMdd')}",
										"type": "Expression"
									}
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "input",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "output",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "delete_folder",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "cp_input_output",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "input",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "azure_blob_storage",
									"type": "LinkedServiceReference"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false,
								"prefix": {
									"value": "@{utcNow('yyyyMMdd')}",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "delete_flag",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "delete_folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "input",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "azure_blob_storage",
									"type": "LinkedServiceReference"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false,
								"prefix": {
									"value": "@{concat('flag_', utcNow('yyyyMMdd'),'.flg')}",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"countdown": {
						"type": "String"
					},
					"flag_found": {
						"type": "String"
					},
					"timenow": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/input')]",
				"[concat(variables('factoryId'), '/datasets/output')]",
				"[concat(variables('factoryId'), '/linkedServices/azure_blob_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/param_variables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SetNombre",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "nombre",
							"value": {
								"value": "@pipeline().parameters.nombre",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetEdad",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetNombre",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "edad",
							"value": {
								"value": "@string(pipeline().parameters.edad)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetCuenta",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetEdad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "cuenta",
							"value": {
								"value": "@string(pipeline().parameters.cuenta)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetActivo",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetCuenta",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "activo",
							"value": {
								"value": "@pipeline().parameters.activo",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"nombre": {
						"type": "string"
					},
					"edad": {
						"type": "int"
					},
					"cuenta": {
						"type": "float"
					},
					"activo": {
						"type": "bool"
					}
				},
				"variables": {
					"nombre": {
						"type": "String"
					},
					"edad": {
						"type": "String"
					},
					"cuenta": {
						"type": "String"
					},
					"activo": {
						"type": "Boolean"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "a",
							"value": {
								"value": "@formatDateTime(utcNow(), 'HHmmss')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"a": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "prueba",
							"value": {
								"value": "true",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(bool(variables('prueba')), true)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set variable3",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prueba",
										"value": "ha fallao"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set variable2",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prueba",
										"value": "ha funcionado"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"prueba": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set_variable",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var",
							"value": {
								"value": "@pipeline().parameters.param",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set_variable2",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "set_variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var2",
							"value": {
								"value": "@pipeline().parameters.param",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"param": {
						"type": "string"
					}
				},
				"variables": {
					"var": {
						"type": "String"
					},
					"var2": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_pipeline_executer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "execute_pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "test_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"param": "Hola Mundo"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"var": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/test_pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_pipeline_get_metadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get_input",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "csv",
								"type": "DatasetReference",
								"parameters": {
									"container": "input"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"input_path": {
						"type": "string"
					},
					"output_path": {
						"type": "string"
					}
				},
				"variables": {
					"param_var": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_pipeline_set_variables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set_variable",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var_param",
							"value": {
								"value": "@pipeline().parameters.param",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"param": {
						"type": "string"
					}
				},
				"variables": {
					"var_param": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MySqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MySql1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "`test`"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MySql1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_container')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_blob_storage_t2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_blob_storage_t2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_blob_storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().container",
							"type": "Expression"
						},
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "STA",
						"type": "String"
					},
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "Precip",
						"type": "String"
					},
					{
						"name": "WindGustSpd",
						"type": "String"
					},
					{
						"name": "MaxTemp",
						"type": "String"
					},
					{
						"name": "MinTemp",
						"type": "String"
					},
					{
						"name": "MeanTemp",
						"type": "String"
					},
					{
						"name": "Snowfall",
						"type": "String"
					},
					{
						"name": "PoorWeather",
						"type": "String"
					},
					{
						"name": "YR",
						"type": "String"
					},
					{
						"name": "MO",
						"type": "String"
					},
					{
						"name": "DA",
						"type": "String"
					},
					{
						"name": "PRCP",
						"type": "String"
					},
					{
						"name": "DR",
						"type": "String"
					},
					{
						"name": "SPD",
						"type": "String"
					},
					{
						"name": "MAX",
						"type": "String"
					},
					{
						"name": "MIN",
						"type": "String"
					},
					{
						"name": "MEA",
						"type": "String"
					},
					{
						"name": "SNF",
						"type": "String"
					},
					{
						"name": "SND",
						"type": "String"
					},
					{
						"name": "FT",
						"type": "String"
					},
					{
						"name": "FB",
						"type": "String"
					},
					{
						"name": "FTI",
						"type": "String"
					},
					{
						"name": "ITH",
						"type": "String"
					},
					{
						"name": "PGT",
						"type": "String"
					},
					{
						"name": "TSHDSBRSGF",
						"type": "String"
					},
					{
						"name": "SD3",
						"type": "String"
					},
					{
						"name": "RHX",
						"type": "String"
					},
					{
						"name": "RHN",
						"type": "String"
					},
					{
						"name": "RVG",
						"type": "String"
					},
					{
						"name": "WTE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_blob_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/drugs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_blob_storage_t2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "drug200.csv",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Age",
						"type": "String"
					},
					{
						"name": "Sex",
						"type": "String"
					},
					{
						"name": "BP",
						"type": "String"
					},
					{
						"name": "Cholesterol",
						"type": "String"
					},
					{
						"name": "Na_to_K",
						"type": "String"
					},
					{
						"name": "Drug",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_blob_storage_t2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/drugs_dest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_blob_storage_t2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_blob_storage_t2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_blob_storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_blob_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_blob_storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_blob_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MySql1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "MySql",
				"typeProperties": {
					"connectionString": "[parameters('MySql1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/azure_blob_storage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "get_metadata_csv to csv on azure blob storage",
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('azure_blob_storage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/azure_blob_storage_t2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('azure_blob_storage_t2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MySql2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "MySql",
				"typeProperties": {
					"connectionString": "[parameters('MySql2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MySqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MySql2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "`daily`"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MySql2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/output_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_blob_storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@{utcNow('yyyyMMdd')}",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@{utcNow('yyyyMMdd')}",
							"type": "Expression"
						},
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "2023-03-07 00:00:00.0000000",
						"type": "String"
					},
					{
						"name": "valor1",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_blob_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/entrypoint_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set_call_sql",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "call_sql",
							"value": {
								"value": "@pipeline().parameters.param_call_sql",
								"type": "Expression"
							}
						}
					},
					{
						"name": "check_call_sql_var",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "set_call_sql",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('call_sql'), bool(true))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "execute_server",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "azcopy_pipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "execute_sql",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "sql_pipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"param_call_sql": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"variables": {
					"call_sql": {
						"type": "Boolean"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/sql_pipeline')]",
				"[concat(variables('factoryId'), '/pipelines/azcopy_pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger_mvdata')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "entrypoint_pipeline",
							"type": "PipelineReference"
						},
						"parameters": {
							"param_call_sql": "[parameters('trigger_mvdata_properties_entrypoint_pipeline_parameters_param_call_sql')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-03-07T03:30:00Z",
						"endTime": "2023-06-27T08:30:00Z",
						"timeZone": "UTC",
						"schedule": {}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/entrypoint_pipeline')]"
			]
		}
	]
}